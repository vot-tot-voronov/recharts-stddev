{"version":3,"sources":["App.js","index.js"],"names":["data","name","uv","pv","amt","calculation","number","length","avg","reduce","acc","currentValue","dispersion","Math","pow","stddev","sqrt","max","obj","Infinity","avg_plus_stddev","avg_minus_stddev","App","LineChart","width","height","margin","top","right","left","bottom","id","x1","y1","x2","y2","offset","stopColor","XAxis","dataKey","YAxis","CartesianGrid","strokeDasharray","Line","type","stroke","dot","activeDot","r","Tooltip","Legend","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e35483d.chunk.js","sourcesContent":["import React from \"react\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\n\nconst data = [\n    {name: 'Page A', uv: 4000, pv: 2400, amt: 2400},\n    {name: 'Page B', uv: 3000, pv: 1398, amt: 2210},\n    {name: 'Page C', uv: 2000, pv: 9800, amt: 2290},\n    {name: 'Page D', uv: 2780, pv: 3908, amt: 2000},\n    {name: 'Page E', uv: 1890, pv: 4800, amt: 2181},\n    {name: 'Page F', uv: 2390, pv: 3800, amt: 2500},\n    {name: 'Page G', uv: 3490, pv: 4300, amt: 2100}\n];\n\nconst calculation = (data, name) => {\n  const number = data.length; // количество элементов\n  const avg = data.reduce((acc, currentValue) => acc + currentValue[name], 0) / number; // среднее значение\n  const dispersion = data.reduce((acc, currentValue) => acc + Math.pow(currentValue[name] - avg, 2), 0) / number; // дисперсия\n  const stddev = Math.sqrt(dispersion); // среднеквадратичное отклонение\n  const max = data.reduce((max, obj) => Math.max(max, obj[name]), -Infinity); // находим максимальное значение\n  return { avg, stddev, max }; // возвращаем объект\n}\n\nconst avg_plus_stddev = (data, name) => {\n  const { avg, stddev, max } = calculation(data, name);\n  return (avg + stddev) / max; // коэффициент для максимального значения\n}\nconst avg_minus_stddev = (data, name) => {\n  const { avg, stddev, max } = calculation(data, name);\n  return (avg - stddev) / max; // коэффициент для максимального значения\n}\n\nconst App = () => {\n  return (\n    <LineChart\n      width={500}\n      height={300}\n      data={data}\n      margin={{\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      }}>\n      <defs>\n        <linearGradient id=\"uv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n          <stop offset=\"0\" stopColor=\"red\" />\n          <stop offset={avg_minus_stddev(data, 'uv')} stopColor=\"red\" />\n          <stop offset={avg_minus_stddev(data, 'uv')} stopColor=\"green\" />\n          <stop offset={avg_plus_stddev(data, 'uv')} stopColor=\"green\" />\n          <stop offset={avg_plus_stddev(data, 'uv')} stopColor=\"red\" />\n          <stop offset=\"1\" stopColor=\"red\" />\n        </linearGradient>\n        <linearGradient id=\"pv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n          <stop offset=\"0\" stopColor=\"red\" />\n          <stop offset={avg_minus_stddev(data, 'pv')} stopColor=\"red\" />\n          <stop offset={avg_minus_stddev(data, 'pv')} stopColor=\"green\" />\n          <stop offset={avg_plus_stddev(data, 'pv')} stopColor=\"green\" />\n          <stop offset={avg_plus_stddev(data, 'pv')} stopColor=\"red\" />\n          <stop offset=\"1\" stopColor=\"red\" />\n        </linearGradient>\n      </defs>\n      <XAxis dataKey=\"name\" />\n      <YAxis />\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <Line\n        type=\"monotone\"\n        dataKey=\"uv\"\n        stroke=\"url(#uv)\"\n        dot={false}\n        activeDot={{ r: 4 }}\n      />\n      <Line\n        type=\"monotone\"\n        dataKey=\"pv\"\n        stroke=\"url(#pv)\"\n        dot={false}\n        activeDot={{ r: 4 }}\n      />\n      <Tooltip />\n      <Legend />\n    </LineChart>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}